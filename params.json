{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Remoting\r\n\r\n*Remoting* is a great way to turn plain rake tasks in scripts to manage your production server remotely. It provides a little framework to run remote commands over SSH along with a DSL to define remote scripts. Interactive tasks that involves `sudo` are supported too.\r\n\r\nInstall\r\n\r\n    gem 'remoting'\r\n    \r\nUpdate your bundle\r\n  \r\n    bundle install\r\n\r\nGenerate `remote.yml` stub\r\n\r\n    rails g remoting:install\r\n\r\nEdit `config/remote.yml`\r\n\r\n``` yaml\r\nremote:\r\n  any_setting_you_like: Here you can define properties that will be available in 'config' struct inside rake tasks!\r\n  example: Below are some tipical configuration settings you may wish to define ...\r\n  login: user@server\r\n  dest: /var/ror/myapp\r\n  repo: git@gitserver:myapp.git\r\n  ruby: 1.9.3\r\n  gemset: myapp\r\n```       \r\n\r\n## Usage\r\n\r\nJust require `remoting/task` inside your tasks. NOTE: you can also require it globally but is not recommended cause here `String` is patched to enable bash-flavoured syntax.\r\n\r\n_ex._\r\n\r\n``` rb   \r\ndesc \"Restart the server\"\r\ntask :restart do\r\n  require 'remoting/task'\r\n    \r\n  remote('restart', config.login) do\r\n   mkdir '-p', config.dest.join('tmp')\r\n   touch config.dest.join('tmp', 'restart.txt') \r\n  end\r\n    \r\nend\r\n```\r\n \r\nMethods invoked inside the `remote` block are executed inside a ssh session. `remote` takes two arguments: `name` and `login`. `name` serves only for logging purposal while `login` is the login string to access the server supplied in the form of `user@host`\r\n\r\n### DSL\r\n\r\nBy examples\r\n\r\n``` rb\r\nremote(\"my task\", config.login) do \r\n\r\n  ps(\"aux\") | grep(\"mysql\") \r\n  echo 'noise' > \"/dev/null\"\r\n  echo 'setting=value' >> \"settings.conf\"\r\n  tail -100 config.dir.join('log', 'logfile.log')\r\n  command(\"[[ -f \\\"path\\\" ]] && run_a_command\")\r\n\r\nend\r\n```\r\n\r\n### Local Tasks using DSL\r\n\r\nYou can also define local tasks using the same DSL\r\n\r\n``` rb   \r\ndesc \"Setup git origin\"\r\ntask :init do\r\n  require 'remoting/task'\r\n    \r\n  local('init') do\r\n    git :init\r\n    git :remote, :add, :origin, config.repo\r\n  end  \r\nend\r\n```\r\n\r\nMethods invoked inside the `local` block are executed locally. `local` takes only the `name` parameter.\r\n\r\n\r\n### Interactive tasks\r\n\r\nInvoking `remote` with `:interactive => true` will tell `remote` to yield the process to ssh, this way you will remotely interact with the server. On the other side everithing that is supposed to be executed after `remote` wont run. Despite this interactive tasks are very useful.\r\n\r\n#### Example 1. Rails remote console (by popular demand):\r\n\r\n``` rb  \r\n# my_remote_task.rake\r\n\r\ndesc \"Open rails console on server\"\r\ntask :console do\r\n  require 'remoting/task'\r\n\r\n  remote('console', config.login, :interactive => true) do\r\n    cd config.dest\r\n    source '$HOME/.rvm/scripts/rvm'\r\n    bundle :exec, \"rails c production\"\r\n  end\r\nend\r\n```\r\n    \r\n####  Example 2. Reloading Apache configuration (involves sudo):\r\n\r\n``` rb   \r\ntask :reload do\r\n  require 'remoting/task'\r\n\r\n  remote('reload', config.login, :interactive => true) do\r\n    sudo \"/etc/init.d/apache2 reload\"\r\n  end\r\nend\r\n```\r\n\r\n## A note on modularity\r\n\r\nA complete deployment manager (like Capistrano even if probably not as good as it is) can be easily built over *remoting*. Capistrano recipes can be ordinary rake tasks packed as gems. Plus various _deployment strategies_ can be assembled as dependencies of a main `deploy` task.\r\n\r\n``` rb\r\n# Gemfile\r\ngem 'remoting_scm_git'          # provides 'remoting:scm:push, remoting:scm:update_remoting_code'\r\ngem 'remoting_server_passenger' # provides 'remoting:server:restart'\r\n\r\n# remoting.rake\r\ndesc \"Deploy application on server\"\r\ntask :deploy => [\"remoting:scm:push\", \"remoting:scm:update_remoting_code\", \"remoting:bundle\", \"remoting:server:restart\"] do\r\nend\r\n```\r\n\r\n## Examples\r\n\r\nYou can find more examples under `examples` source directory\r\n\r\n\r\n## Coming Soon\r\n\r\n* Ability to define bunch of commands as functions\r\n* Pre-packed strategies     \r\n\r\n---\r\n\r\nCopyright (c) 2012 mcasimir\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","name":"Remoting","tagline":"Remoting â€“ turn plain rake tasks in scripts to manage your production server remotely","google":""}